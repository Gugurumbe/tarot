/**
   @page tutoriel Tutoriel : utilisation, contribution

   @section zero À partir de zéro

   Vous voulez développer votre propre client (ou votre propre
   serveur). Vous devez vous connecter en tcp sur le serveur (45678,
   port par défaut). Des messages seront échangés avec lui. Un message
   contient :

   1. Sa taille, sur 1 octet non signé.
   2. Son type, sur 1 octet non signé.
   3. Sa partie variable.
   
   Voici les types :

   - 0  : erreur_protocole. Pas de partie variable. Signification :
   vous avez dit quelque chose à un moment inopportun, ou ça n'entre
   pas dans le protocole.

   - 1  : refuse. Pas de partie variable. Signification : vous avez
   fait une requête du bon type au bon moment, mais elle ne respecte
   pas les règles. Valable aussi si le nom que vous souhaitez utiliser
   est déjà pris.

   - 2  : numero. Morceau variable : mon numéro sur 1 octet non
   signé. Votre numéro est un nombre entre 0 et 4 inclus. Si c'est 0,
   vous devez être le premier à priser. Si c'est x, il faut attendre
   de recevoir x messages de type contrat avant de priser.

   - 3  : distribution. Morceau variable : mes 15 cartes, chacune sur 1
   octet non signé. 

   - 4  : prise. Morceau variable : ma prise (1 octet, non signé). 0 :
   passe, 4 : garde contre. Le client doit émettre ce message. 

   - 5  : contrat. Morceau variable : la prise du joueur (1 octet, non
   signé). Un contrat intermédiaire a été formulé.

   - 6  : appel. Pas de partie variable. Vous avez remporté les
   enchères, et vous devez maintenant appeler une carte.

   - 7  : appeler. Morceau variable : la carte que vous voulez appeler
   (1 octet, non signé).

   - 8  : contrat_final. Morceau variable : 1 octet non signé
   (preneur), 1 octet non signé (prise), 1 octet non signé (carte
   appelée). 

   - 9  : chien. Morceau variable : 3 octets (les 3 cartes dévoilées du
   chien). Si vous êtes le preneur, vous devez écarter.

   - 10 : ecart. Morceau variable : 3 octets (les 3 cartes que vous
   voudriez écarter).

   - 11 : atout. Morceau variable : au plus 3 octets (les atouts
   écartés). 

   - 12 : inutilisé

   - 13 : jeu. Morceau variable : 1 octet, le joueur devant
     ouvrir. Pour l'instant, c'est 0.

   - 14 : inutilisé

   - 15 : inutilisé

   - 16 : requete. Morceau variable : 1 octet (la carte que vous
   voudriez jouer). C'est à vous s'il y a eu (votre tour - tour du
   joueur d'ouverture) modulo 5 cartes jouées depuis le dernier pli.

   - 17 : carte. Morceau variable : 1 octet (la carte jouée). À vous de
   déterminer qui l'a jouée, à partir du numéro du joueur d'ouverture
   et le nombre de cartes jouées depuis la fin du dernier pli.

   - 18 : pli. Morceau variable : 1 octet (numéro du joueur
   d'ouverture). 

   - 19 : resultat. La donne est finie. Morceau variable : 5 mots de 2
   octets, signés (les résultats de chacun depuis le dernier
   changement de siège).

   - 20 : identifier. À la connexion, vous devez prendre l'initiative
   de vous identifier. Morceau variable : 16 octets pour le nom de
   joueur (en UTF-8 unicode). Peut être refusé (refuse), ou accepté
   (entree). 

   - 21 : entree. Un joueur est entré dans le vestibule, alors que vous
   y êtes déjà. Lors de votre première connexion, tout le monde déjà
   présent vous est présenté via ce message. Morceau variable : 16
   octets pour le nom.

   - 22 : sortie. Un joueur est sorti du vestibule, alors que vous y
   êtes encore vous-même. 16 octets pour le nom.

   - 23 : noms. Vous jouez maintenant une (autre ?) partie avec 4
   autres types. Si vous ne voulez pas, déconnectez-vous. Sinon,
   espérez qu'aucun de ces 4 types ne se déconnecte. Si quelqu'un se
   déconnecte avant vous, vous êtes déconnecté et devez refaire toute
   la procédure, comme en cas de refus. On vous donne votre numéro. La
   distribution commence. Morceau variable : 5 * 16 octets, pour les 5
   noms, dans l'ordre du numéro. On vous reprécise votre numéro juste
   après. 

   - 24 : inviter. Vous demandez de faire un groupe avec 4 autres
   personnes. Si toutes sont dans le vestibule, une partie
   commence. Sinon, refusé. Morceau variable : 4 * 16 octets, les noms
   des gens que vous voulez inviter.
   .

   Vous devez donc émettre : identifier, (inviter), prise, appeler,
   ecarter, requete, requete, ... dans le cas où vous prenez (prise
   autre que garde contre ou garde sans) en tant que client. Hors jeu,
   vous devez émettre rejoindre ou accueillir, et dans ce cas gérer
   votre table. 
   
   @section un En utilisant ce qu'on a déjà
   
   L'objectif est d'utiliser la classe ClientJeu, qui fournit de
   l'information sous forme de signaux Qt, et qui permet d'enregistrer
   des ordres facilement. Vous avez droit à tous les signaux de
   ClientJeu, plus ClientJeu::partie qui vous fournit une
   PartieClient, d'où vous pourrez savoir le Partie::tour(), 
   Partie::attaquant(), PartieClient::mon_jeu(), Partie::tapis(),
   ... 
   
   En ce qui concerne les ordres à envoyer, vous pouvez utiliser
   ClientJeu::formuler_prise, ClientJeu::formuler_appel,
   ClientJeu::formuler_ecart, ClientJeu::formuler_requete.

   Étape par étape :
   
   Commencez par récupérer les sources, puis déplacez-vous dans
   client/. Faites un dossier, par exemple bete, puis
   déplacez-vous dedans et faites un nouveau projet Qt. Le fichier de
   projet doit ressembler au fichier ci-dessous : on ajoute la dépendance 
   network, et on inclue et compile tous les fichiers de ../shared et
   ../../shared. 
   
   @include ../client/bete/client.pro

   Maintenant, on peut travailler. Faites un fichier principal (ici,
   main_program.cpp), à cet endroit :

   @include ../client/bete/main_program.cpp

   On voit que l'on a fait une classe externe, Ia. Il suffit après de
   connecter les signaux d'information de ClientJeu aux slots de notre
   nouvelle classe. Ensuite, il faut appeler les slots
   ClientJeu::formuler_* pour interagir avec le serveur. Dans
   l'exemple, j'ai fait une Ia dite "basique", plutôt étroite d'esprit
   : elle ne prend jamais, n'invite jamais personne, et n'accepte les
   invitations que de certaines personnes. Lorsque la partie est
   terminée, le programme termine. 

   @include ../client/bete/ia.hpp
   
   @include ../client/bete/ia.cpp

   @subsection emission Ordre d'émission des signaux
   Les signaux sont émis dans un ordre "logique" dans les différentes
   situations.

   Identification :
   1. ClientJeu::doit_identifier()
   2. ClientJeu::entree() éventuellement (avec multiplicité, en
   finissant par moi) ou ClientJeu::identification_refusee() et retour
   à 1. 
   3. ClientJeu::identification_acceptee()
   4. ClientJeu::entree(), ClientJeu::sortie() : d'autres gens
   arrivent et partent. NB : un client qui trouve une partie SORT.

   Constitution de la table :
   1. ClientJeu::invitation_acceptee() ou
   ClientJeu::invitation_refusee() si j'ai demandé une invitation. NB
   : le fait que l'invitation soit refusée signifie que l'une des
   personnes que je demande n'est pas présente, ou que je ne m'inclus
   pas, ou qu'il y a un doublon. La partie commence dès que
   l'invitation est acceptée par le SERVEUR. Si le client n'est pas
   d'accord, il est prié de se déconnecter et reconnecter.
   2. ClientJeu::adversaires(), qui me donne les noms de mes
   adversaires dans l'ordre de jeu. Premier signal répété à chaque
   manche !
   3. ClientJeu::numero_change()

   Phase d'enchères :
   1. ClientJeu::contrat_intermediaire() (du joueur précédent)
   2. ClientJeu::doit_priser() (Vous devez priser à partir de ce moment)
   3. ClientJeu::enchere_acceptee() (ou ClientJeu::enchere_refusee()
   et retour à 2.)
   4. ClientJeu::contrat_intermediaire() (le vôtre)
   5. ClientJeu::contrat_intermediaire() celui du joueur suivant.
   
   Appels :
   1. ClientJeu::contrat_intermediaire() (du joueur précédent)
   2. ClientJeu::doit_appeler() (vous devez appeler à partir de ce
   moment)
   3. ClientJeu::appel_accepte() (ou ClientJeu::appel_refuse() et
   retour à 2.)
   4. ClientJeu::contrat_final()
   5. ClientJeu::chien() (ou saut à la phase de jeu en cas de contrat
   supérieur) 
   6. ClientJeu::jeu_change()
   7. ClientJeu::jeu_est()
   8. ClientJeu::doit_ecarter() (vous devez écarter à partir de ce
   moment)
   9. ClientJeu::atout_au_chien() (éventuellement)
   10. ClientJeu::ecart_accepte() (ou ClientJeu::ecart_refuse() et
   retour à 7.)
   11. ClientJeu::jeu_change()

   Jeu :
   1. ClientJeu::carte_jouee() (par le joueur précédent)
   2. ClientJeu::maitre_change() (éventuellement)
   3. ClientJeu::tapis_change()
   4. ClientJeu::doit_jouer() (vous devez jouer à partir de ce moment)
   5. ClientJeu::requete_acceptee() (ou ClientJeu::requete_refusee()
   et retour à 4.)
   6. ClientJeu::jeu_change() (vous perdez la carte jouée)
   7. ClientJeu::jeu_est()
   8. ClientJeu::carte_jouee() (par vous)
   9. ClientJeu::maitre_change() (éventuellement, dans ce cas c'est
   vous)
   10. ClientJeu::tapis_change()

   Fin de levée :
   1. ClientJeu::carte_jouee() (par le dernier joueur)
   2. ClientJeu::maitre_change() (éventuellement)
   3. 5 fois (dans l'ordre des cartes jouées)
   ClientJeu::carte_gagnee()
   4. ClientJeu::tapis_change()
   5. ClientJeu::doit_jouer() (si vous avez remporté le pli)

   Fin de partie : comme à la fin de la dernière levée, sans le
   dernier point. À la place, on a ClientJeu::partie_terminee(). On
   recommence une nouvelle partie immédiatement.

   @section conclusion Conclusion
   Il y a un protocole à respecter pour communiquer avec le serveur,
   et pour utiliser les classes existantes, il faut se mettre au bon
   endroit, compiler les bons fichiers, utilier la dépendance netork,
   de déclarer une variable de type ClientJeu.
*/
